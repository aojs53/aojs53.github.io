<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>あ、じゃぁ近況報告でも</title><link href="https://aojs53.github.io/" rel="alternate"></link><link href="https://aojs53.github.io/feeds/tech.atom.xml" rel="self"></link><id>https://aojs53.github.io/</id><updated>2016-07-21T02:43:00+09:00</updated><entry><title>Pelicanを使ってみることにする</title><link href="https://aojs53.github.io/2016/07/21/beginning-pelican.html" rel="alternate"></link><published>2016-07-21T02:43:00+09:00</published><author><name>aojs53</name></author><id>tag:aojs53.github.io,2016-07-21:2016/07/21/beginning-pelican.html</id><summary type="html">&lt;h1&gt;インストール&lt;/h1&gt;
&lt;p&gt;pelicanのインストールは
http://blog.sotm.jp/2014/01/04/Pelican-Markdown-GithubPages-install-guide/
を参照。&lt;/p&gt;
&lt;h1&gt;github pagesを復習&lt;/h1&gt;
&lt;p&gt;なんかまだよくわかっていなかったので復習。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;githubで静的なページを公開するためのサービスがgithub pages。&lt;/li&gt;
&lt;li&gt;markdownなどをpushして、自動でhtmlを生成することも可能。あるいはローカルでjekyllやpelicanをつかって静的ページを生成してからpushする。&lt;/li&gt;
&lt;li&gt;github pagesを公開する方法はふたつ。ユーザ/組織ページと、プロジェクトページ。&lt;/li&gt;
&lt;li&gt;ユーザ/組織ページ -- リポジトリの名前を、ユーザ名.github.io としてファイルをコミットすると、このリポジトリのmasterブランチの内容がページとして公開される。&lt;/li&gt;
&lt;li&gt;プロジェクトページ -- ふつうのリポジトリに内容を空なgh-pagesブランチをつくる(git checkout --orphan gh-pages)。でこのブランチにコミットした内容が公開される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回自分は、ユーザページを公開している。つまりaojs53.github.ioというリポジトリをつくって、そのリポジトリのmasterブランチにコンテンツをつくっていくかたち。&lt;/p&gt;
&lt;h1&gt;リポジトリをつくるところからの手順&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;mkdir aojs53.github.io&lt;/li&gt;
&lt;li&gt;pelican-quickstart で新規プロジェクト作成 (github pagesをつかう &amp;amp; user pageか?にyes)&lt;/li&gt;
&lt;li&gt;git add .&lt;/li&gt;
&lt;li&gt;.gitignoreの作成とgit add&lt;/li&gt;
&lt;li&gt;git commit&lt;/li&gt;
&lt;li&gt;git branch -m master source&lt;/li&gt;
&lt;li&gt;git branch master&lt;/li&gt;
&lt;li&gt;git remote add https://github.com/aojs53/aojs53.github.io.git&lt;/li&gt;
&lt;li&gt;コンテンツをかく&lt;/li&gt;
&lt;li&gt;make html&lt;/li&gt;
&lt;li&gt;make github&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でよくなった。&lt;/p&gt;
&lt;h1&gt;pelicanでテーマを変更する&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;pelicanconf.py&lt;/li&gt;
&lt;li&gt;THEMEに、相対パスでテーマディレクトリを指定すると、そのテーマを利用する。
    http://pelicanthemes.com/ にサンプル多数。ここからたどって、pelican-themeディレクトリにgit cloneしてくる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;わからないことを調べる&lt;/h1&gt;
&lt;h2&gt;ghp-importってなんだ?&lt;/h2&gt;
&lt;p&gt;https://github.com/davisp/ghp-import
のREADME.mdをみるとわかった。
プロジェクトのgithub pagesはgh-pagesブランチにドキュメントをおかないといけないけど、いちいち切り替えたりするの面倒。
だから、masterとかコードと同じブランチでドキュメントを書いて、公開目的でgh-pagesブランチにコピーだけすればいいじゃん、と。
そのためのスクリプトがghp-import。&lt;/p&gt;
&lt;h2&gt;git pushはなにをしている?&lt;/h2&gt;
&lt;p&gt;ghp-importコマンドでoutputの内容をgh-pagesブランチにコピーしてある状態で、git push ...を実行すると
ローカルリポジトリのgh-pagesブランチの内容をaojs53.github.ioのmasterブランチにpushする。
つまり、ユーザページが更新される。
https://github.com/davisp/ghp-import
をみると、pelican-quickstartで生成されたMakefileのtargetに、githubというのがあるとのこと。
ただしデフォルトだと、プロジェクトページをpublishする内容になっている。
ユーザページ向けは、なおして使ってね、というかんじみたい。&lt;/p&gt;
&lt;h2&gt;ブランチの管理をどうしたらよいかわからない&lt;/h2&gt;
&lt;p&gt;上記の例だと、ローカルにあるリポジトリとgithub上のリポジトリは別もの。
できれば同じリポジトリでソースと公開すべきhtmlの両方を管理したいところ。
プロジェクトページであれば、masterでソースを管理して、gh-pagesにコピーというので
よいのだろうけど、ユーザページを使いたい。&lt;/p&gt;
&lt;p&gt;http://blog.sotm.jp/2014/01/04/Pelican-Markdown-GithubPages-install-guide/
をみたら、以下のようにすればよい、とかいてあった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init .
$ git branch -m master &lt;span class="nb"&gt;source&lt;/span&gt;      &lt;span class="c1"&gt;# masterブランチをsourceという名前に変更&lt;/span&gt;
$ git remote add origin &amp;lt;自分のGitHubリポジトリでコピーしてきたなにか&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でも結局、pelicanが生成してくれるMakefileでmake githubとすれば同じことをしてくれたのでそれをつかう。&lt;/p&gt;
&lt;h2&gt;git remoteってなんだ?&lt;/h2&gt;
&lt;p&gt;gitではローカルの自分のリポジトリと、リモートリポジトリを強調させながら開発を
すすめていくようなつくりになっている。&lt;/p&gt;
&lt;p&gt;ふつうは、git cloneしてくると、clone元が”origin”となる。
以下、今の自分のリポジトリは、githubからcloneしてきているだけ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git remote
origin
git remote -v
origin    https://github.com/aojs53/aojs53.github.io.git &lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
origin    https://github.com/aojs53/aojs53.github.io.git &lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;共同開発者のremoteリポジトリを複数登録して、pushしたりpullしたりしあう
ことが可能になる。git remote add &lt;name&gt; &lt;url&gt;で追加できる。&lt;/p&gt;
&lt;p&gt;git fecth remote-name -- ローカルリポジトリに更新をとりこみ
git pull remote-name -- fetch &amp;amp; mergeを自動でやる
git push orign master -- ローカルのmasterをoriginにpushする&lt;/p&gt;
&lt;h2&gt;pelican-themeは自分のリポジトリにいれたくない&lt;/h2&gt;
&lt;p&gt;git submoduleをつかえばいいようだ。
http://qiita.com/sotarok/items/0d525e568a6088f6f6bb&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule add https://github.com/jody-frankowski/blue-penguin.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でできた。&lt;/p&gt;</summary><category term="pelican"></category></entry></feed>